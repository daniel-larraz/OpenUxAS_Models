-- automation-request-validator.lus

include "../common/types.lus"
include "../common/pltl.lus"


-- This constant represents a skolemized universally quantified variable
-- that we use to link details of a message appearing the past with details
-- of our output message in properties.
--
-- Placed here for use in our contract.
const arv_future_out_msg : message;


contract arv_contract(
    -- The message currently received by the service
    in_msg : message;

    -- The ID to be used for ID generation
    in_id : id_type;

    -- True if the service is permitted to send a message.
    can_send_message : bool;
) returns (
    -- The message currently sent by the service
    out_msg : message;
);
let
    guarantee "Automation Request Validator R1. IC.
      The Automation Request Validator initial condition is to send no
      message.\n  "
    (
        (out_msg = no_message) -> true
    );

    guarantee "Automation Request Validator R2. Respects bus access.
      The Automation Request Validator does not send a message when instructed
      not to.\n  "
    (
        not can_send_message
    ) => (
        out_msg = no_message
    );


    mode No_Message (
        require (
            out_msg = no_message
        );
    );

    var last_UAR : message =
      if in_msg.kind = unique_automation_response then
        in_msg
      else
        (no_message -> pre last_UAR)
    ;

    mode Automation_Response (
        require (
            out_msg <> no_message
        );

        ensure "Automation Request Validator R3. Message IDs.
          The Automation Request Validator correctly computes output message
          IDs.\n  "
        (
            out_msg.id = in_id + 1
        );

        ensure "Automation Request Validator R4. Only Response.
          The Automation Request Validator only sends Automation Response
          messages.\n  "
        (
            out_msg.kind = automation_response
        ) ;

        ensure "Automation Request Validator R5.
          When the Automation Request Validator sends an Automation Response
          message, the route sent belongs to the previously received Unique
          Automation Response message that is referenced in the Automation
          Response message.\n  "
        (
            true
        ) -> (
            pre last_UAR.kind = unique_automation_response
            and
            out_msg.ref = pre last_UAR.id
            and
            out_msg.route = pre last_UAR.route
        )
        ;
    );
tel;


--
-- The Automation Request Validator service
--
node automation_request_validator(
    -- The message currently received by the service
    in_msg : message;

    -- The ID to be used for ID generation
    in_id : id_type;

    -- True if the service is permitted to send a message.
    can_send_message : bool;
) returns (
    -- The message currently sent by the service
    out_msg : message;
);
(*@contract
    import arv_contract(in_msg, in_id, can_send_message) returns (out_msg);
*)
var
    -- ===================================================================== --
    -- Service state
    --
    -- The route that this service should pass on
    route : route_type;

    -- The ID of the message that provided the route above
    route_msg_id : id_type;
let
    -- ===================================================================== --
    -- Service Behavior

    -- These expressions serve as high-level specifications of service
    -- behavior. Each is preceded by a natural-language description of the
    -- specification, set off in quotes for clarity.

    -- "If there is a stored route and the service is permitted to transmit on
    --  the bus, the service shall send the stored route in an Automation
    --  Response message."
    out_msg =   if (no_route -> pre(route)) <> no_route and
                   can_send_message
                then
                    message {
                        kind     = automation_response;
                        id       = in_id + 1;
                        ref      = no_id -> pre(route_msg_id);
                        route    = no_route -> pre(route);
                        waypoint = no_waypoint;
                    }
                else
                    no_message;


    -- "If the service receives a Unique Automation Response message, the
    --  service shall store the route from the Unique Automation Response
    --  message. Otherwise, the service shall clear the stored route."
    route = if in_msg.kind = unique_automation_response then
                in_msg.route
            else
                no_route;


    -- "If the service receives a Unique Automation Response message, the
    --  service shall store the ID of the Unique Automation Response message."
    route_msg_id =  if in_msg.kind = unique_automation_response then
                        in_msg.id
                    else
                        no_id;
tel;
