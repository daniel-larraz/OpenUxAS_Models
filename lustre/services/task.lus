-- task.lus

include "../common/types.lus"
include "../common/pltl.lus"


contract task_contract(
    -- The message currently received by the service
    in_msg : message;

    -- The ID to be used for ID generation
    in_id : id_type;

    -- True if the service is permitted to send a message.
    can_send_message : bool;
) returns (
    -- The message currently sent by the service
    out_msg : message;
);
let
    guarantee "Task R1. IC.
      The Task initial condition is to send no message.\n  "
    (
        O(out_msg = no_message)
    );

    guarantee "Task R2. Respects bus access.
      The Task does not send a message when instructed not to.\n  "
    (
        not can_send_message
    ) => (
        out_msg = no_message
    );

    guarantee "One Mode Active"
    (
        (::No_Message xor ::Some_Message) and
        (::Some_Message => (::Task_Complete xor ::Error_Response))
    );

    mode No_Message (
        require (
            out_msg = no_message
        );
    );

    mode Some_Message (
        require (
            out_msg <> no_message
        );

        ensure "Task R3. Message IDs.
          The Task correctly computes output message IDs.\n  "
        (
            out_msg.id = in_id + 1
        );
    );

    mode Task_Complete (
        require ::Some_Message;
        require (
            out_msg.kind = task_complete
        );

        ensure "R4.
          When the Task sends a Task Complete message, the monitored route was
          contained in a previously received Automation Response message.\n  "
        (
          exists (m: history(in_msg))
            m.kind  = automation_response and
            m.route = out_msg.route
        );
    );

    mode Error_Response (
        require ::Some_Message;
        require (
            out_msg.kind = error_response
        );

        ensure "Task R3. Message IDs.
          The Task correctly computes output message IDs.\n  "
        (
            out_msg.id = in_id + 1
        );
    );
tel;


--
-- An abstract Task
--
node task(
    -- The message currently received by the service
    in_msg : message;

    -- The ID to be used for ID generation
    in_id : id_type;

    -- True if the service is permitted to send a message.
    can_send_message : bool;
) returns (
    -- The message currently sent by the service
    out_msg : message;
);
(*@contract
    import task_contract(in_msg, in_id, can_send_message) returns (out_msg);
*)
var
    -- ===================================================================== --
    -- Task state
    --
    -- The route that this task is monitoring for completion.
    monitored_route : route_type;

    -- The current index, for iterating over the route to match waypoints.
    waypoint_index : index_type;

    -- The waypoint that is expected to be sent from the monitored route.
    expected_waypoint : waypoint_type;

    -- True if the received waypoint doesn't match the expected waypoint.
    error : bool;
const
    free_waypoint_index : index_type;
let
    -- ===================================================================== --
    -- Task Behavior

    frame (monitored_route, waypoint_index, expected_waypoint)
        -- "The monitored route shall initially be cleared."
        monitored_route = no_route;

        -- "The stored waypoint index shall initially be cleared."
        waypoint_index = no_index;

        -- "The expected waypoint shall initially be cleared."
        expected_waypoint = no_waypoint;
    let
        -- "If the service receives an Automation Response message, the service
        --  shall store the route from the Automation Response message and the
        --  index of the first waypoint in the route."
        if in_msg.kind = automation_response then
            monitored_route = in_msg.route;
            waypoint_index  = in_msg.route.first_index;

        -- "If the service receives a Mission Command message, the service
        --  shall increment the waypoint index and shall expect to receive the
        --  waypoint retrieved from the monitored route at the prior index."
        elsif in_msg.kind = mission_command then
            waypoint_index = pre(waypoint_index) + 1;

            -- This feels clumsy. For mission command M, we bump the waypoint
            -- index but expect to see the waypoint at the prior index (i.e.,
            -- prior to the bump). So we have to fetch from the route using
            -- pre.
            expected_waypoint = get(monitored_route, no_index -> pre(waypoint_index));
        fi
    tel


    frame (error)
        -- "The error flag shall initially be cleared."
        error = false;
    let
        -- "If the service receives an Automation Response message, the service
        --  shall clear its error flag."
        if in_msg.kind = automation_response then
            error = false;

        -- "If the service receives a Mission Command message, the service
        --  shall preserve the error flag if set or set the error flag if
        --  the received waypoint differs from the expected waypoint."
        elsif in_msg.kind = mission_command then
            error = pre(error) or expected_waypoint <> in_msg.waypoint;
        fi
    tel


    out_msg =   if -- no error was raised (we saw all waypoints expected)
                   not error and

                   -- we are actually monitoring a sequence (otherwise the
                    -- value of waypoint_index is undefined)
                   nonempty_sequence(monitored_route) and

                   -- we've run out of waypoints to expect
                   waypoint_index > monitored_route.last_index and

                   -- we actually were looking for waypoints prior to running
                   -- out of waypoints to expect
                   expected_waypoint <> no_waypoint and

                   -- we are permitted to send a message
                   can_send_message
                then
                    message {
                        kind     = task_complete;
                        id       = in_id + 1;
                        ref      = no_id;
                        route    = monitored_route;
                        waypoint = no_waypoint;
                    }
                else if -- we didn't see the waypoint we expected
                        error and

                        -- we didn't see an error immediately before this step
                        -- - this makes the error responses a
                        -- rising-edge-triggered output
                        (false -> (not pre(error))) and

                        -- we are permitted to send a message
                        can_send_message
                then
                    message {
                        kind     = error_response;
                        id       = in_id + 1;
                        ref      = no_id;
                        route    = monitored_route;
                        waypoint = expected_waypoint;
                    }
                else
                    no_message;


    -- ===================================================================== --
    -- Properties of Interest

    -- This property is nice, but it's still weaker than desired. It doesn't
    -- say anything about the order in which the waypoints were received - only
    -- that all of the waypoints were received.
    --
    -- I can't think of any way to reason about the order of events in time.
    check "P2.
      When the Task sends a Task Complete message, it has received every
      waypoint on the route it was monitoring.\n"
    (
        exists (m: history(in_msg))
          m.kind = mission_command and
          m.waypoint = get(out_msg.route, free_waypoint_index)
    ) provided (
        out_msg.kind = task_complete and
        valid_index(out_msg.route, free_waypoint_index)
    );

    check "P2.1.
      When the Task sends a Task Complete message, the monitored route was
      contained in a previously received Automation Response message.\n  "
    (
        exists (m: history(in_msg))
          m.kind = automation_response and
          m.route = out_msg.route
    ) provided (
        out_msg.kind = task_complete
    );


    check "P3.
      When the Task sends an Error Response message, it has received a waypoint
      that does not match the expected waypoint.\n  "
    (
        false -> (
          exists (m: history(in_msg))
            m.kind = mission_command and
            m.waypoint <> out_msg.waypoint
        )
    ) provided (
        out_msg.kind = error_response
    );

    check "P3.1.
      When the Task sends an Error Response message, the monitored route
      is no_route or was contained in a previously received Automation Response
      message.\n  "
    (
        out_msg.route = no_route or
        (
          exists (m: history(in_msg))
            m.kind = automation_response and
            m.route = out_msg.route
        )
    ) provided (
        out_msg.kind = error_response
    );

    check "P3.2.
      When the Task sends an Error Response message, the expected waypoint is
      either no_waypoint or is on the monitored route.\n  "
    (
        out_msg.waypoint = no_waypoint or
        contains(out_msg.route, out_msg.waypoint)
    ) provided (
        out_msg.kind = error_response
    );

    check "L1. Lemma for R4.\n  "
    (
      monitored_route = no_route
      or
      (
        exists (m: history(in_msg))
          m.kind = automation_response and
          m.route = monitored_route
      )
    ) ;

    check "L2. Lemma for R4.\n  "
    (
      not error and
      waypoint_index <> free_waypoint_index and
      monitored_route.first_index=free_waypoint_index
      =>
       exists (m: history(in_msg))
          m.kind = mission_command and
          m.waypoint = get(monitored_route, free_waypoint_index)
    );

    check "L3. Lemma for R4.\n  "
    (
      not error and
      waypoint_index <> free_waypoint_index and
      waypoint_index >= free_waypoint_index and
      free_waypoint_index > monitored_route.first_index
      =>
       exists (m: history(in_msg))
          m.kind = mission_command and
          m.waypoint = get(monitored_route, free_waypoint_index)
    );

tel;
